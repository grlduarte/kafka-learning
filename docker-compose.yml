version: '3'

services:

  # setting up the producer that writes random numbers
  # to the topic quickstart
  producer:
    image: python-producer
    container_name: producer
    depends_on:
      - kafka-topics
    build:
      context: ./kafka-python
      dockerfile: Dockerfile

  # zookeeper is, well, it holds the zoo in one piece
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # this port is kind of default (docs) for zp
      ZOOKEEPER_TICK_TIME: 2000

  # brokers are the core of kafka, topics are stored in here
  # also you could have several brokers
  broker:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  # schema registry holds the information about what type of
  # data are passed within each topic
  # here it is only started, but not set up
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry0
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    restart: always
    image: confluentinc/cp-kafka-connect-base:latest
    #image: kafka-jdbc:latest
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083 
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_PARTITIONS: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_PARTITIONS: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_PARTITIONS: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - type: bind
        source: ./connect
        target: /connect
    command: "bash /connect/launch.sh"

  # control center is this cool feature that lets you
  # see all the brokers, topics, consumers and messages
  # goin on, accessed on localhost:9021
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center0
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - 9021:9021
    expose:
      - 9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:9092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_CONNECT_JDBC_CLUSTER: 'http://connect:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-topics:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-topics
    depends_on:
      - broker
      - zookeeper
    # this command will create the topic called quickstart
    # containing 1 partition with a replication factor of 1
    # it could be repeated for any topics would like to be
    # pre created
    command: >
      bash -c "echo Waiting for the broker to be ready... &&
               cub kafka-ready -b broker:9092 1 90 && 
               kafka-topics --bootstrap-server broker:9092 \
               --create --if-not-exists \
               --partitions 1 \
               --replication-factor 1 \
               --topic quickstart-events"

  database:
    image: postgres:latest
    container_name: postgres
    environment:
      TZ: "America/Sao_Paulo"
      # default user name: postgres
      POSTGRES_PASSWORD: "pass"
    ports:
      - 25432:5432
    volumes:
      - ./db/postgres:/var/lib/postgresql/data
      - ./db/create-tables.sql:/docker-entrypoint-initdb.d/database.sql
